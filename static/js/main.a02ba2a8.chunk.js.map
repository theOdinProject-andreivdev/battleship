{"version":3,"sources":["util/blockType.js","components/Gameboard.js","components/Plane.js","ui/BlockUI.js","util/gameStatus.js","util/drawBlocks.js","ui/GameboardUI.js","App.js","reportWebVitals.js","index.js"],"names":["blockType","HEAD","BODY","NOT_DEFINED","HIT","AIR","Gameboard","blocks","planes","i","boardSize","row","j","push","x","y","type","addPlane","plane","success","outOfPlane","getBlocks","forEach","pb","collision","b","updateBoard","removePlane","pl","length","head","splice","tmpblocks","br","block","getPlanes","rotate","hit","hitx","hity","parseInt","movePlane","selectedPlane","xorg","yorg","xdest","ydest","xdelta","ydelta","movable","undefined","everyPlane","epb","move","Plane","dead","headHit","blockLine","getDead","BlockUI","props","blocktype","className","style","border","margin","width","height","data-x","data-y","gameStatus","selecting","moving","movingout","movingin","dropped","drawBlocks","GameboardUI","gameBoard","state","status","gameBoardGrid","moveOrigin","plane1","plane2","e","preventDefault","this","setState","forceUpdate","target","dataset","destx","desty","display","gridTemplateRows","gridTemplateColumns","map","onClick","onBlockClick","bind","onMouseDown","mouseDown","onMouseLeave","mouseLeave","onMouseOver","mouseEnter","onMouseUp","mouseUp","uniqid","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a02ba2a8.chunk.js","sourcesContent":["const blockType = {\n  HEAD: \"H\",\n  BODY: \"B\",\n  NOT_DEFINED: \"_\",\n  HIT: \"X\",\n  AIR: \" \",\n};\n\nexport default blockType;\n","import blockType from \"../util/blockType\";\n\nconst Gameboard = () => {\n  const boardSize = 10;\n  let blocks = [];\n  let planes = [];\n\n  for (let i = boardSize - 1; i >= 0; i--) {\n    let row = [];\n    for (let j = 0; j < boardSize; j++) {\n      row.push({ x: j, y: i, type: blockType.NOT_DEFINED });\n    }\n    blocks.push(row);\n  }\n\n  const addPlane = (plane) => {\n    let success = true;\n    let outOfPlane = false;\n    plane.getBlocks().forEach((pb) => {\n      if (\n        pb.x < 0 ||\n        pb.x > boardSize - 1 ||\n        pb.y < 0 ||\n        pb.y > boardSize - 1\n      ) {\n        if (pb.type === blockType.HEAD || pb.type === blockType.BODY) {\n          outOfPlane = true;\n          success = false;\n        }\n      }\n    });\n\n    let collision = false;\n    getBlocks().forEach((b) => {\n      plane.getBlocks().forEach((pb) => {\n        if (b.x === pb.x && b.y === pb.y) {\n          if (\n            (b.type === blockType.HEAD || b.type === blockType.BODY) &&\n            (pb.type === blockType.HEAD || pb.type === blockType.BODY)\n          ) {\n            collision = true;\n            success = false;\n          }\n        }\n      });\n    });\n\n    if (outOfPlane === false && collision === false) {\n      planes.push(plane);\n      updateBoard();\n    }\n\n    return success;\n  };\n\n  const updateBoard = () => {\n    planes.forEach((plane) => {\n      getBlocks().forEach((b) => {\n        plane.getBlocks().forEach((pb) => {\n          if (b.x === pb.x && b.y === pb.y) {\n            if (\n              pb.type === blockType.HEAD ||\n              pb.type === blockType.BODY ||\n              pb.type === blockType.HIT\n            )\n              b.type = pb.type;\n          }\n        });\n      });\n    });\n  };\n\n  const removePlane = (plane) => {\n    planes.forEach((pl) => {\n      if (pl === plane) {\n        getBlocks().forEach((b) => {\n          pl.getBlocks().forEach((pb) => {\n            if (b.x === pb.x && b.y === pb.y) {\n              if (\n                (b.type === blockType.BODY || b.type === blockType.HEAD) &&\n                (pb.type === blockType.BODY || pb.type === blockType.HEAD)\n              ) {\n                pb = null;\n                b.type = blockType.NOT_DEFINED;\n              }\n            }\n          });\n        });\n      }\n    });\n\n    for (let i = 0; i < planes.length; i++) {\n      if (planes[i].head === plane.head) planes.splice(i, 1);\n    }\n  };\n\n  const movePlane = ({ x: xorg, y: yorg }, { x: xdest, y: ydest }) => {\n    let xdelta = xdest - xorg;\n    let ydelta = ydest - yorg;\n\n    let selectedPlane;\n    let movable = true;\n\n    planes.forEach((plane) => {\n      plane.getBlocks().forEach((pb) => {\n        if (pb.x === parseInt(xorg) && pb.y === parseInt(yorg))\n          selectedPlane = plane;\n      });\n    });\n\n    if (selectedPlane !== undefined) {\n      selectedPlane.getBlocks().forEach((pb) => {\n        if (\n          (pb.x + xdelta < 0 ||\n            pb.x + xdelta > blocks.length - 1 ||\n            pb.y + ydelta < 0 ||\n            pb.y + ydelta > blocks.length - 1) &&\n          (pb.type === blockType.BODY || pb.type === blockType.HEAD)\n        ) {\n          movable = false;\n        }\n      });\n\n      planes.forEach((everyPlane) => {\n        if (everyPlane != selectedPlane) {\n          everyPlane.getBlocks().forEach((epb) => {\n            selectedPlane.getBlocks().forEach((pb) => {\n              if (\n                (epb.type == blockType.HEAD || epb.type == blockType.BODY) &&\n                (pb.type == blockType.HEAD || pb.type == blockType.BODY)\n              ) {\n                if (epb.x == pb.x + xdelta && epb.y == pb.y + ydelta)\n                  movable = false;\n              }\n            });\n          });\n        }\n      });\n\n      /* selectedPlane.getBlocks().forEach((pb) => {\n        planes.forEach((everyPlane) => {\n          if (everyPlane != selectedPlane)\n            everyPlane.getBlocks().forEach((epb) => {\n              if (\n                pb.x + parseInt(xdelta) == epb.x &&\n                pb.y + parseInt(ydelta) == epb.y\n              )\n                if (pb.type == blockType.BODY || pb.type == blockType.HEAD)\n                  if (epb.type == blockType.BODY || epb.type == blockType.HEAD)\n                    movable = false;\n            });\n        });\n      }); */\n\n      if (movable) {\n        getBlocks().forEach((b) => {\n          selectedPlane.getBlocks().forEach((pb) => {\n            if (b.x === pb.x && b.y === pb.y) b.type = blockType.NOT_DEFINED;\n          });\n        });\n\n        selectedPlane.move(xdelta, ydelta);\n        updateBoard();\n      }\n    }\n  };\n\n  const rotate = (plane) => {\n    removePlane(plane);\n    plane.rotate();\n    let success = addPlane(plane);\n    return success;\n  };\n\n  const getBlocks = () => {\n    let tmpblocks = [];\n\n    blocks.forEach((br) => {\n      br.forEach((block) => {\n        tmpblocks.push(block);\n      });\n    });\n\n    return [...tmpblocks];\n  };\n\n  const getPlanes = () => {\n    return planes;\n  };\n\n  const hit = ({ x: hitx, y: hity }) => {\n    planes.forEach((plane) => {\n      plane.hit({ x: hitx, y: hity });\n    });\n\n    blocks.forEach((br) => {\n      br.forEach((b) => {\n        if (b.x === parseInt(hitx) && b.y === parseInt(hity)) {\n          b.type = blockType.HIT;\n        }\n      });\n    });\n\n    updateBoard();\n  };\n\n  return {\n    boardSize,\n    getBlocks,\n    addPlane,\n    removePlane,\n    getPlanes,\n    rotate,\n    hit,\n    movePlane,\n  };\n};\n\nexport default Gameboard;\n","import blockType from \"../util/blockType\";\n\nconst Plane = ({ x: headx, y: heady }) => {\n  let head = { x: headx, y: heady };\n  let dead = false;\n\n  let blocks = [\n    [\n      { x: head.x - 1, y: head.y, type: blockType.NOT_DEFINED },\n      { x: head.x, y: head.y, type: blockType.HEAD },\n      { x: head.x + 1, y: head.y, type: blockType.NOT_DEFINED },\n      { x: head.x + 2, y: head.y, type: blockType.NOT_DEFINED },\n    ],\n    [\n      { x: head.x - 1, y: head.y + 1, type: blockType.BODY },\n      { x: head.x, y: head.y + 1, type: blockType.BODY },\n      { x: head.x + 1, y: head.y + 1, type: blockType.BODY },\n      { x: head.x + 2, y: head.y + 1, type: blockType.NOT_DEFINED },\n    ],\n    [\n      { x: head.x - 1, y: head.y + 2, type: blockType.NOT_DEFINED },\n      { x: head.x, y: head.y + 2, type: blockType.BODY },\n      { x: head.x + 1, y: head.y + 2, type: blockType.NOT_DEFINED },\n      { x: head.x + 2, y: head.y + 2, type: blockType.NOT_DEFINED },\n    ],\n    [\n      { x: head.x - 1, y: head.y + 3, type: blockType.BODY },\n      { x: head.x, y: head.y + 3, type: blockType.BODY },\n      { x: head.x + 1, y: head.y + 3, type: blockType.BODY },\n      { x: head.x + 2, y: head.y + 3, type: blockType.NOT_DEFINED },\n    ],\n  ];\n\n  const hit = ({ x: hitx, y: hity }) => {\n    dead = true;\n\n    let headHit = false;\n    if (hitx == head.x && hity == head.y) headHit = true;\n\n    blocks.forEach((blockLine) => {\n      blockLine.forEach((block) => {\n        if (block.x == hitx && block.y == hity) {\n          block.type = blockType.HIT;\n        }\n        if (headHit && block.type !== blockType.NOT_DEFINED)\n          block.type = blockType.HIT;\n\n        if (block.type === blockType.HEAD || block.type === blockType.BODY)\n          dead = false;\n      });\n    });\n  };\n\n  const rotate = () => {\n    let tmpblocks = [\n      [\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n      ],\n      [\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n      ],\n      [\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n      ],\n      [\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n      ],\n    ];\n\n    for (let i = 0; i < blocks.length; i++) {\n      for (let j = 0; j < blocks.length; j++) {\n        tmpblocks[i][j].x = blocks[i][j].x;\n        tmpblocks[i][j].y = blocks[i][j].y;\n        tmpblocks[i][j].type = blocks[blocks.length - j - 1][i].type;\n        if (tmpblocks[i][j].type === blockType.HEAD) {\n          head = { x: tmpblocks[i][j].x, y: tmpblocks[i][j].y };\n        }\n      }\n    }\n\n    blocks.splice(0, blocks.length, ...tmpblocks);\n  };\n\n  const move = (xdelta, ydelta) => {\n    let tmpblocks = [\n      [\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n      ],\n      [\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n      ],\n      [\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n      ],\n      [\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n      ],\n    ];\n\n    for (let i = 0; i < blocks.length; i++) {\n      for (let j = 0; j < blocks.length; j++) {\n        tmpblocks[i][j].x = blocks[i][j].x + parseInt(xdelta);\n        tmpblocks[i][j].y = blocks[i][j].y + parseInt(ydelta);\n        tmpblocks[i][j].type = blocks[i][j].type;\n      }\n    }\n\n    blocks.splice(0, blocks.length, ...tmpblocks);\n  };\n\n  const getDead = () => {\n    return dead;\n  };\n\n  const getBlocks = () => {\n    let tmpblocks = [];\n\n    blocks.forEach((br) => {\n      br.forEach((block) => {\n        tmpblocks.push(block);\n      });\n    });\n\n    return [...tmpblocks];\n  };\n  return { head, getBlocks, hit, rotate, getDead, blockType, move };\n};\n\nexport default Plane;\n","import Gameboard from \"../components/Gameboard\";\nimport Plane from \"../components/Plane\";\n\nfunction BlockUI(props) {\n  let blocktype = \"\";\n  let blocktext = \"\";\n  let block = props.block;\n  switch (props.block.type) {\n    case \"H\":\n      blocktype = \"btn-primary\";\n      blocktext = \"H\";\n      break;\n    case \"B\":\n      blocktype = \"btn-secondary\";\n      blocktext = \"B\";\n      break;\n    case \"_\":\n      blocktype = \"btn-light\";\n      blocktext = \"_\";\n      break;\n    case \"X\":\n      blocktype = \"btn-danger\";\n      blocktext = \"X\";\n      break;\n  }\n  return (\n    <div\n      className={`${blocktype} ${block.x} ${block.y}`}\n      style={{\n        border: \"1px solid black\",\n        margin: \"0px\",\n        width: \"100%\",\n        height: \"100%\",\n      }}\n      data-x={block.x}\n      data-y={block.y}\n    ></div>\n  );\n}\n\nexport default BlockUI;\n","const gameStatus = {\n  selecting: 1,\n  moving: 2,\n  movingout: 3,\n  movingin: 4,\n  dropped: 5,\n};\n\nexport default gameStatus;\n","function drawBlocks(blocks) {\n  let str = \"\";\n\n  for (let i = 0; i < blocks.length; i++) {\n    str = str.concat(\"\\n\");\n    for (let j = 0; j < blocks.length; j++) {\n      str = str.concat(\"x=\" + blocks[i][j].x + \" \" + \"y=\" + blocks[i][j].y);\n      str = str.concat(\"  \" + blocks[i][j].type);\n      str = str.concat(\"   |   \");\n    }\n  }\n  console.log(str);\n  return str;\n}\n\nexport default drawBlocks;\n","import Gameboard from \"../components/Gameboard\";\nimport Plane from \"../components/Plane\";\nimport BlockUI from \"./BlockUI\";\nimport uniqid from \"uniqid\";\nimport { Component } from \"react\";\nimport gameStatus from \"../util/gameStatus\";\nimport blockType from \"../util/blockType\";\nimport drawBlocks from \"../util/drawBlocks\";\n\nclass GameboardUI extends Component {\n  constructor(props) {\n    super(props);\n    this.gameBoard = Gameboard();\n    this.state = {\n      status: gameStatus.selecting,\n      gameBoardGrid: this.gameBoard.getBlocks(),\n      moveOrigin: { x: 0, y: 0 },\n    };\n\n    const plane1 = Plane({ x: 2, y: 2 });\n    this.gameBoard.addPlane(plane1);\n\n    const plane2 = Plane({ x: 5, y: 5 });\n    this.gameBoard.addPlane(plane2);\n  }\n\n  onBlockClick(e) {\n    e.preventDefault();\n\n    /* \n    switch (this.state.status) {\n      case gameStatus.placing:\n        break;\n      case gameStatus.playing:\n        this.gameBoard.hit({\n          x: e.target.dataset.x,\n          y: e.target.dataset.y,\n        });\n        this.setState({ gameBoardGrid: this.gameBoard.getBlocks() });\n        break;\n      default:\n        break;\n    } */\n  }\n\n  mouseDown(e) {\n    if (\n      this.state.status === gameStatus.selecting ||\n      this.state.status === gameStatus.dropped\n    ) {\n      this.setState({ status: gameStatus.moving });\n      this.forceUpdate();\n    }\n  }\n\n  mouseLeave(e) {\n    if (\n      this.state.status === gameStatus.moving ||\n      this.state.status === gameStatus.movingin\n    ) {\n      if (e.target.dataset.x !== null && e.target.dataset.y !== null) {\n        this.setState({ status: gameStatus.movingout });\n        this.setState({\n          moveOrigin: { x: e.target.dataset.x, y: e.target.dataset.y },\n        });\n        this.forceUpdate();\n      }\n    }\n  }\n\n  mouseEnter(e) {\n    if (this.state.status === gameStatus.movingout) {\n      if (e.target.dataset.x != null && e.target.dataset.y != null) {\n        let destx = e.target.dataset.x;\n        let desty = e.target.dataset.y;\n\n        this.gameBoard.movePlane(this.state.moveOrigin, {\n          x: destx,\n          y: desty,\n        });\n      }\n\n      this.setState({ gameBoardGrid: this.gameBoard.getBlocks() });\n      this.setState({ status: gameStatus.movingin });\n      this.forceUpdate();\n    }\n  }\n\n  mouseUp(e) {\n    this.setState({ status: gameStatus.dropped });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <div className=\"card\">\n            <div\n              className=\"card-body\"\n              style={{\n                display: \"grid\",\n                gridTemplateRows: \"repeat(10, 20px)\",\n                gridTemplateColumns: \"repeat(10, 20px)\",\n              }}\n            >\n              {this.state.gameBoardGrid.map((block) => {\n                return (\n                  <div\n                    key={uniqid()}\n                    onClick={this.onBlockClick.bind(this)}\n                    onMouseDown={this.mouseDown.bind(this)}\n                    onMouseLeave={this.mouseLeave.bind(this)}\n                    onMouseOver={this.mouseEnter.bind(this)}\n                    onMouseUp={this.mouseUp.bind(this)}\n                    style={{\n                      display: \"flex\",\n                      width: \"100%\",\n                      height: \"100%\",\n                    }}\n                  >\n                    <BlockUI block={block} />\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameboardUI;\n","import \"./App.css\";\nimport GameboardUI from \"./ui/GameboardUI\";\n\nfunction App() {\n  return <GameboardUI></GameboardUI>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}