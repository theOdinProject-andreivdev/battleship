{"version":3,"sources":["util/blockType.js","components/Gameboard.js","components/Plane.js","ui/BlockUI.js","util/drawBlocks.js","ui/GameboardUI.js","App.js","reportWebVitals.js","index.js"],"names":["blockType","HEAD","BODY","NOT_DEFINED","HIT","AIR","Gameboard","blocks","planes","i","boardSize","row","j","push","x","y","type","addPlane","plane","success","outOfPlane","getBlocks","forEach","pbr","pb","collision","br","b","updateBoard","removePlane","pl","length","head","splice","getPlanes","rotate","hit","hitx","hity","Plane","dead","headHit","blockLine","block","tmpblocks","getDead","BlockUI","props","blocktype","className","style","margin","width","height","data-x","data-y","drawBlocks","GameboardUI","console","log","gameBoard","state","gameBoardGrid","plane1","plane2","e","preventDefault","this","target","dataset","setState","map","onClick","onBlockClick","bind","uniqid","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d5c4937.chunk.js","sourcesContent":["const blockType = {\n  HEAD: \"H\",\n  BODY: \"B\",\n  NOT_DEFINED: \"_\",\n  HIT: \"X\",\n  AIR: \" \",\n};\n\nexport default blockType;\n","import blockType from \"../util/blockType\";\n\nconst Gameboard = () => {\n  const boardSize = 10;\n  let blocks = [];\n  let planes = [];\n\n  for (let i = boardSize - 1; i >= 0; i--) {\n    let row = [];\n    for (let j = 0; j < boardSize; j++) {\n      row.push({ x: j, y: i, type: blockType.NOT_DEFINED });\n    }\n    blocks.push(row);\n  }\n\n  const addPlane = (plane) => {\n    let success = true;\n    let outOfPlane = false;\n    plane.getBlocks().forEach((pbr) => {\n      pbr.forEach((pb) => {\n        if (\n          pb.x < 0 ||\n          pb.x > boardSize - 1 ||\n          pb.y < 0 ||\n          pb.y > boardSize - 1\n        ) {\n          if (pb.type === blockType.HEAD || pb.type === blockType.BODY) {\n            outOfPlane = true;\n            success = false;\n          }\n        }\n      });\n    });\n\n    let collision = false;\n    blocks.forEach((br) => {\n      br.forEach((b) => {\n        plane.getBlocks().forEach((pbr) => {\n          pbr.forEach((pb) => {\n            if (b.x === pb.x && b.y === pb.y) {\n              if (\n                (b.type === blockType.HEAD || b.type === blockType.BODY) &&\n                (pb.type === blockType.HEAD || pb.type === blockType.BODY)\n              ) {\n                collision = true;\n                success = false;\n              }\n            }\n          });\n        });\n      });\n    });\n\n    if (outOfPlane === false && collision === false) {\n      planes.push(plane);\n      updateBoard();\n    }\n\n    return success;\n  };\n\n  const updateBoard = () => {\n    planes.forEach((plane) => {\n      blocks.forEach((br) => {\n        br.forEach((b) => {\n          plane.getBlocks().forEach((pbr) => {\n            pbr.forEach((pb) => {\n              if (b.x === pb.x && b.y === pb.y) {\n                if (\n                  pb.type === blockType.HEAD ||\n                  pb.type === blockType.BODY ||\n                  pb.type === blockType.HIT\n                )\n                  b.type = pb.type;\n              }\n            });\n          });\n        });\n      });\n    });\n  };\n\n  const removePlane = (plane) => {\n    planes.forEach((pl) => {\n      if (pl === plane) {\n        blocks.forEach((br) => {\n          br.forEach((b) => {\n            pl.getBlocks().forEach((pbr) => {\n              pbr.forEach((pb) => {\n                if (b.x === pb.x && b.y === pb.y) {\n                  if (\n                    (b.type === blockType.BODY || b.type === blockType.HEAD) &&\n                    (pb.type === blockType.BODY || pb.type === blockType.HEAD)\n                  )\n                    b.type = blockType.NOT_DEFINED;\n                }\n              });\n            });\n          });\n        });\n      }\n    });\n\n    for (let i = 0; i < planes.length; i++) {\n      if (planes[i].head === plane.head) planes.splice(i, 1);\n    }\n  };\n\n  const rotate = (plane) => {\n    removePlane(plane);\n    plane.rotate();\n    let success = addPlane(plane);\n    return success;\n  };\n\n  const getBlocks = () => {\n    return [...blocks];\n  };\n\n  const getPlanes = () => {\n    return planes;\n  };\n\n  const hit = ({ x: hitx, y: hity }) => {\n    planes.forEach((plane) => {\n      plane.hit({ x: hitx, y: hity });\n    });\n\n    blocks.forEach((br) => {\n      br.forEach((b) => {\n        if (b.x == hitx && b.y == hity) {\n          b.type = blockType.HIT;\n        }\n      });\n    });\n\n    updateBoard();\n  };\n\n  return {\n    boardSize,\n    getBlocks,\n    addPlane,\n    removePlane,\n    getPlanes,\n    rotate,\n    hit,\n  };\n};\n\nexport default Gameboard;\n","import blockType from \"../util/blockType\";\n\nconst Plane = ({ x: headx, y: heady }) => {\n  let head = { x: headx, y: heady };\n  let dead = false;\n\n  let blocks = [\n    [\n      { x: head.x - 1, y: head.y, type: blockType.NOT_DEFINED },\n      { x: head.x, y: head.y, type: blockType.HEAD },\n      { x: head.x + 1, y: head.y, type: blockType.NOT_DEFINED },\n      { x: head.x + 2, y: head.y, type: blockType.NOT_DEFINED },\n    ],\n    [\n      { x: head.x - 1, y: head.y + 1, type: blockType.BODY },\n      { x: head.x, y: head.y + 1, type: blockType.BODY },\n      { x: head.x + 1, y: head.y + 1, type: blockType.BODY },\n      { x: head.x + 2, y: head.y + 1, type: blockType.NOT_DEFINED },\n    ],\n    [\n      { x: head.x - 1, y: head.y + 2, type: blockType.NOT_DEFINED },\n      { x: head.x, y: head.y + 2, type: blockType.BODY },\n      { x: head.x + 1, y: head.y + 2, type: blockType.NOT_DEFINED },\n      { x: head.x + 2, y: head.y + 2, type: blockType.NOT_DEFINED },\n    ],\n    [\n      { x: head.x - 1, y: head.y + 3, type: blockType.BODY },\n      { x: head.x, y: head.y + 3, type: blockType.BODY },\n      { x: head.x + 1, y: head.y + 3, type: blockType.BODY },\n      { x: head.x + 2, y: head.y + 3, type: blockType.NOT_DEFINED },\n    ],\n  ];\n\n  const hit = ({ x: hitx, y: hity }) => {\n    dead = true;\n\n    let headHit = false;\n    if (hitx == head.x && hity == head.y) headHit = true;\n\n    blocks.forEach((blockLine) => {\n      blockLine.forEach((block) => {\n        if (block.x == hitx && block.y == hity) {\n          block.type = blockType.HIT;\n        }\n        if (headHit && block.type !== blockType.NOT_DEFINED)\n          block.type = blockType.HIT;\n\n        if (block.type === blockType.HEAD || block.type === blockType.BODY)\n          dead = false;\n      });\n    });\n  };\n\n  const rotate = () => {\n    let tmpblocks = [\n      [\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n      ],\n      [\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n      ],\n      [\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n      ],\n      [\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n        { x: 0, y: 0, type: 0 },\n      ],\n    ];\n\n    for (let i = 0; i < blocks.length; i++) {\n      for (let j = 0; j < blocks.length; j++) {\n        tmpblocks[i][j].x = blocks[i][j].x;\n        tmpblocks[i][j].y = blocks[i][j].y;\n        tmpblocks[i][j].type = blocks[blocks.length - j - 1][i].type;\n        if (tmpblocks[i][j].type === blockType.HEAD) {\n          head = { x: tmpblocks[i][j].x, y: tmpblocks[i][j].y };\n        }\n      }\n    }\n\n    blocks.splice(0, blocks.length, ...tmpblocks);\n  };\n\n  const getDead = () => {\n    return dead;\n  };\n\n  const getBlocks = () => {\n    return blocks;\n  };\n  return { head, getBlocks, hit, rotate, getDead, blockType };\n};\n\nexport default Plane;\n","import Gameboard from \"../components/Gameboard\";\nimport Plane from \"../components/Plane\";\n\nfunction BlockUI(props) {\n  let blocktype = \"\";\n  let blocktext = \"\";\n  let block = props.block;\n  switch (props.block.type) {\n    case \"H\":\n      blocktype = \"btn-primary\";\n      blocktext = \"H\";\n      break;\n    case \"B\":\n      blocktype = \"btn-secondary\";\n      blocktext = \"B\";\n      break;\n    case \"_\":\n      blocktype = \"btn-light\";\n      blocktext = \"_\";\n      break;\n    case \"X\":\n      blocktype = \"btn-danger\";\n      blocktext = \"X\";\n      break;\n  }\n  return (\n    <div>\n      <button\n        type=\"button\"\n        className={`btn ${blocktype} m-0 p-0 ${block.x} ${block.y}`}\n        style={{ margin: \"0xp\", width: \"4vh\", height: \"4vh\" }}\n        data-x={block.x}\n        data-y={block.y}\n      >\n        {/* {blocktext} */}\n      </button>\n    </div>\n  );\n}\n\nexport default BlockUI;\n","function drawBlocks(blocks) {\n  let str = \"\";\n\n  for (let i = 0; i < blocks.length; i++) {\n    str = str.concat(\"\\n\");\n    for (let j = 0; j < blocks.length; j++) {\n      str = str.concat(\"x=\" + blocks[i][j].x + \" \" + \"y=\" + blocks[i][j].y);\n      str = str.concat(\"  \" + blocks[i][j].type);\n      str = str.concat(\"   |   \");\n    }\n  }\n  console.log(str);\n  return str;\n}\n\nexport default drawBlocks;\n","import Gameboard from \"../components/Gameboard\";\nimport Plane from \"../components/Plane\";\nimport BlockUI from \"./BlockUI\";\nimport uniqid from \"uniqid\";\nimport { Component, useEffect, useState } from \"react\";\nimport drawBlocks from \"../util/drawBlocks\";\nimport { render } from \"@testing-library/react\";\n\nclass GameboardUI extends Component {\n  constructor(props) {\n    super(props);\n    console.log(\"Load UI\");\n    this.gameBoard = Gameboard();\n    this.state = { gameBoardGrid: this.gameBoard.getBlocks() };\n\n    const plane1 = Plane({ x: 2, y: 2 });\n    const plane2 = Plane({ x: 5, y: 5 });\n    this.gameBoard.addPlane(plane1);\n    this.gameBoard.addPlane(plane2);\n  }\n\n  onBlockClick(e) {\n    e.preventDefault();\n    this.gameBoard.hit({ x: e.target.dataset.x, y: e.target.dataset.y });\n    this.setState({ gameBoardGrid: this.gameBoard.getBlocks() });\n  }\n\n  render() {\n    return (\n      <div>\n        <table className=\"table table-responsive\">\n          <tbody>\n            {this.state.gameBoardGrid.map((br) => {\n              return (\n                <tr key={uniqid()}>\n                  {br.map((block) => {\n                    return (\n                      <td key={uniqid()} onClick={this.onBlockClick.bind(this)}>\n                        <BlockUI block={block} />\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default GameboardUI;\n","import \"./App.css\";\nimport GameboardUI from \"./ui/GameboardUI\";\n\nfunction App() {\n  return <GameboardUI></GameboardUI>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}